"""
Немного усложним предыдущую задачу. Теперь кроме списка задач (функций), задан список аргументов для этих задач:

tasks = [функция1, функция2, функция3, ....]
args = [аргумент_для_функции1, аргумент_для_функции2, ...]
Вам не известно ни количество задач в списке, ни имена объектов функций. Но гарантируется, что количество аргументов в списке args совпадает с количеством функций. Каждая функция вызывается с единственным аргументом.

Ваша задача - с помощью потоков запустить все задачи с соответствующими аргументами для одновременного выполнения. Столько задач - сколько дочерних потоков. Также необходимо каждому потоку назначить имя (арибут .name) по имени той задачи, которую он будет вызывать. Имя задачи можно получить, используя дандер метод .__name__, например:

def my_task():
    pass

def my_new_task():
    pass

tasks = [my_task, my_new_task]
for task in tasks:
    print(task.__name__)
Список задач tasks и список аргументов для задач args определены в тестирующей системе. Не переопределяйте их, только используйте. Тест. система проверит общее время выполнения программы и запуск всех задач, каждая в отдельном дочернем потоке. Также выполняется проверка имен созданных дочерних потоков.
"""

import threading

args = [(1,), (2,)]


def my_task(args):
    pass


def my_new_task(args):
    pass


tasks = [my_task, my_new_task]
for i in range(len(tasks)):
    threading.Thread(target=tasks[i], name=f"{tasks[i].__name__}", args=(args[i],)).start()
