"""
Заказчик захотел функционал, позволяющий выявлять незанятость своих таможенных инспекторов. Если инспектор не получает на проверку новую таможенную декларацию в течении какого-то времени, об этом следует известить руководство. По результатам таких логов, например, можно оптимизировать кадровый состав.

К счастью, решение команды построить демонстрационную модель на основе очередей, позволяет довольно просто внедрить этот новый функционал. Ваша задача - переписать целевую функцию потребителя так, чтобы в случае неполучения декларации из очереди за установленное время (очередь пуста - работы нет), поток выводил сообщение и завершал свою работу.

Итак, Ваша задача:

Написать целевую функцию consumer для потоков-инспекторов, чтобы в случае неполучения за заданное время (параметр функции t_wait, тип float) нового объекта – декларации из очереди main_queue, выводилось сообщение в формате:
Очередь пустая, <datetime>, инспектор <name> не занят
где <datetime> – дата и время формирования сообщения (используйте функцию datetime.now() библиотеки datetime)
<name> – имя потока-потребителя
например
Очередь пустая, 2023-05-12 15:00:32.071063, инспектор inspector_1 не занят
и после этого поток-потребитель завершал свою работу. Внимание, соблюдайте пробелы и запятые!

Если же объект декларации CCD из очереди успешно получен, то выводить id этого объекта простым принтом с формате:
Декларация с id = <id> поручена инспектору <name>
<name> – имя потока-потребителя
<id> – атрибут декларации CCD (CCD.id)
например
Декларация с id = 12 поручена инспектору inspector_2
И только после вывода сообщения вызывать функцию обработки handler.

Только определите функцию, ее вызов будет выполнять тестирующая система. Тестирующая система проверяет поведение функции с разными параметрами t_wait. Очередь main_queue, декларации, поток-производитель, потоки-инспекторы, функция handler реализованы в тестирующей системе. Значение задаваемого параметра t_wait будет определено в тестирующей системе.
"""

import threading
import queue
from datetime import datetime


def consumer(t_wait: float) -> None:
    while True:
        try:
            elem = main_queue.get(timeout=t_wait)
            if elem:
                print(f'Декларация с id = {elem.id} поручена инспектору {threading.current_thread().name}')
                handler(elem)
                main_queue.task_done()
        except queue.Empty:
            print(f'Очередь пустая, {datetime.now()}, инспектор {threading.current_thread().name} не занят')
            break
