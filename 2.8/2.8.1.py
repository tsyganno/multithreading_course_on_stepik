"""
В программе заранее создан экземпляр локального хранилища stor_local = threading.local(), а также определена целевая функция для дополнительных потоков. В результате выполнения целевой функции дополнительным потокам назначаются атрибуты локального хранилища. В результате каждый поток имеет три атрибута локального хранилища stor_local:
.url
.method
.key

Ваша задача — написать функцию spyder_info_threads, которая создаст (наполнит) словарь словарей info_threads, содержащий информацию о всех дополнительных потоках. Каждый элемент словаря в качестве ключа должен хранить имя потока, а в качестве значения — словарь:
{'url': <значение атрибута stor_local.url потока>, 'method': <значение атрибута stor_local.method потока>, 'key': <значение атрибута stor_local.key потока>}

Гарантируется, что каждый поток будет иметь уникальное имя и будет содержать все три атрибута локального хранилища: url, method, key.

Тестирующая система создаст экземпляр локального хранилища stor_local. Создаст несколько дополнительных потоков и запустит их на выполнение с заранее созданной целевой функцией, последним вызовом которой будет Ваша функция сбора информации spyder_info_threads(). Затем проверит содержимое словаря info_threads, распечатав его в консоль в отсортированном виде:

for k, v in info_threads.items():
    print(f"{k} {dict((key, v[key]) for key in sorted(v, reverse=True))}")
"""

import threading

info_threads = {}

def spyder_info_threads():
    info_threads[threading.current_thread().name] = {'url': stor_local.url, 'method': stor_local.method, 'key': stor_local.key}
