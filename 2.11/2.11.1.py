"""
Напишите целевую функцию semaphored_task, которая, используя экземпляр семафора semaphore, ограничивает количество одновременных выполнений защищаемой приоритетной задачи, которая включает в себя две функции: get_data() и get_request(). Эту задачу разрешается выполнять не более двумя потоками одновременно. Если задачу уже выполняют два потока, другие потоки, вместо блокирующего ожидания освобождения семафора, должны вызвать вспомогательную функцию get_another_job(). Таким образом, сколько бы не использовалось потоков, не менее двух потоков будут выполнять защищаемую задачу, а остальные — вспомогательную.

Для решения используйте аргументы метода acquire семафора.

Ваша задача — только написать функцию semaphored_task. Тестирующая система создаст и запустит пять потоков для проверки логики целевой функции semaphored_task. Тест. система также проверит итоговое состояние семафора после завершения работы потоков. Функции get_data, get_request и get_another_job определены в тестирующей системе, не изменяйте их.
"""

import threading

# создайте объект семафора
semaphore = threading.Semaphore(2)


def semaphored_task():
    # реализуйте необходимую логику с условиями выполнения функций
    if semaphore._value > 0:
        semaphore.acquire()
        get_data()
        get_request()
        semaphore.release()
    else:
        get_another_job()
